
type a = L(<unit, 10>)
type b = L(<L(<unit, 1000>), 0>)
type c = <b, 10>
type d = <b, 0>

// type e = <c,0> - this will cause parse error


fun hacky (x: <a,0>): <L(<L(<unit, 1000>), 0>) ,0> = 
    match ([]) with | [] -> []
    | xx::xs -> let _ = tick 100000 in tick 10000 // hacky


// this does not typecheck
fun f2 (x: <L(<unit, 1>),0>): c = 
    let x = []::[] in 
    match (x) with |
    [] -> []
    | xx::xs -> x

// this does typecheck
fun f3 (x: <L(<unit, 1>),0>): d = 
    let x = []::[] in 
    match (x) with |
    [] -> []
    | xx::xs -> x


type l1_bad = L(<unit,0>)
type l1_good = L(<unit,1>)
type l2 = L(<unit,0>)

type p = <l1_good * l2, 0>

type pp = <l2,0>

fun rev_append (l: p): pp = 
    letp l1,l2 = l in
    match l1 with
    | [] -> l2
    | x::xs -> 
        let _ = tick 1 in
        let l2p = x::l2 in
        rev_append (xs, l2p)


type innocent = L(<unit, 0>)
fun f4 (xp: <unit,5>): <L(<unit,5>),0> = 
    let x = () :: ([]:L(<unit,5>)) in
    let _ = (x: innocent) in
    let _ = (x: innocent) in
    x