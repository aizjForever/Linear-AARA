
type a = L(<unit, 10>)
type b = L(<L(<unit, 1000>), 0>)
type c = <b, 10>
type d = <b, 0>

// type e = <c,0> - this will cause parse error


fun hacky (x: <a,0>): <L(<L(<unit, 1000>), 0>) ,0> = 
    match ([]) with | [] -> []
    | xx::xs -> let _ = tick 100000 in tick 10000 // hacky


// this does not typecheck
fun f2 (x: <L(<unit, 1>),0>): c = 
    let x = []::[] in 
    match (x) with |
    [] -> []
    | xx::xs -> x

// this does typecheck
fun f3 (x: <L(<unit, 1>),0>): d = 
    let x = []::[] in 
    match (x) with |
    [] -> []
    | xx::xs -> x